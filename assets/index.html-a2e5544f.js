import{_ as o,r as i,o as l,c as r,a as e,b as n,d as s,e as a}from"./app-144f2dab.js";const d={},c=e("h1",{id:"sd-fe-lint",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sd-fe-lint","aria-hidden":"true"},"#"),n(" sd-fe-lint")],-1),p=e("code",null,"sd-fe-lint",-1),u={href:"https://encode-studio-fe.github.io/fe-spec/",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"背景",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),n(" 背景")],-1),m=e("p",null,"我们引入了多个业界流行的 Linter，并根据规范内容定制了规则包，它们包括：",-1),f=e("thead",null,[e("tr",null,[e("th",null,"规范"),e("th",null,"Lint 工具"),e("th",null,"npm 包")])],-1),k=e("td",null,[n("JavaScript 编码规范 "),e("br"),n(" TypeScript 编码规范 "),e("br"),n(" Node 编码规范")],-1),_={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.npmjs.com/package/eslint-config-sd",target:"_blank",rel:"noopener noreferrer"},g=e("td",null,"CSS 编码规范",-1),v={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.npmjs.com/package/sd-stylelint-config",target:"_blank",rel:"noopener noreferrer"},w=e("td",null,"Git 规范",-1),x={href:"https://commitlint.js.org/#/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.npmjs.com/package/sd-commitlint-config",target:"_blank",rel:"noopener noreferrer"},j=e("td",null,"文档规范",-1),L={href:"https://github.com/DavidAnson/markdownlint",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.npmjs.com/package/sd-markdownlint-config",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>可以看到这些 <code>Linter</code> 和规则包众多且零散，全部安装它们会给项目增加十几个依赖，接入和升级成本都比较高。</p><p><code>sd-fe-lint</code> 收敛屏蔽了这些依赖和配置细节，提供简单的 CLI 和 Node.js API，让项目能够一键接入、一键扫描、一键修复、一键升级，并为项目配置 git commit 卡口，降低项目接入规范的成本。</p><h2 id="cli-使用" tabindex="-1"><a class="header-anchor" href="#cli-使用" aria-hidden="true">#</a> CLI 使用</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>在终端执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> sd-fe-lint <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，可执行 <code>sd-fe-lint -h</code> 以验证安装成功。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="sd-fe-lint-create-filename-一键接入" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-create-filename-一键接入" aria-hidden="true">#</a> <code>sd-fe-lint create filename</code>：一键接入</h4><p>直接创建文件夹 然后一键接入规范</p><h4 id="sd-fe-lint-init-一键接入" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-init-一键接入" aria-hidden="true">#</a> <code>sd-fe-lint init</code>：一键接入</h4><p>在已有项目或者新文件夹下接入（空文件夹需要有 <code>package.json</code>）</p><p>在项目根目录执行 <code>sd-fe-lint init</code>，即可一键接入规范，为项目安装规范 <code>Lint</code> 所需的依赖和配置。</p><p>具体会做以下事情：</p>`,14),T=e("code",null,"Linter",-1),N={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://commitlint.js.org/#/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/DavidAnson/markdownlint",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.npmjs.com/package/eslint-config-sd",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.npmjs.com/package/sd-stylelint-config",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.npmjs.com/package/sd-commitlint-config",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.npmjs.com/package/sd-markdownlint-config",target:"_blank",rel:"noopener noreferrer"},M=a("<li><code>.eslintrc.js</code>、<code>.eslintignore</code>：ESLint 配置（继承 <code>eslint-config-sd</code>）及黑名单文件</li><li><code>.stylelintrc.js</code>、<code>.stylelintignore</code>：stylelint 配置（继承 <code>sd-stylelint-config</code>）及黑名单文件</li><li><code>commitlint.config.js</code>：commitlint 配置（继承 <code>sd-commitlint-config</code>）</li><li><code>.markdownlint.json</code>、<code>.markdownlintignore</code>：<code>markdownlint</code> 配置及黑名单文件</li>",4),R=e("code",null,".prettierrc.js",-1),B={href:"https://prettier.io/docs/en/configuration.html",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,".editorconfig",-1),F={href:"https://editorconfig.org/",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,".vscode/extensions.json",-1),z={href:"https://code.visualstudio.com/docs/editor/extension-gallery#_workspace-recommended-extensions",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"ESLint",-1),K=e("code",null,"stylelint",-1),Q=e("code",null,"markdownlint",-1),U=e("code",null,"prettier",-1),W=e("code",null,".vscode/settings.json",-1),X={href:"https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"ESLint",-1),Z=e("code",null,"stylelint",-1),$=e("code",null,"validate",-1),ee=e("strong",null,"保存时自动运行 fix",-1),ne=e("code",null,"Prettier",-1),te=e("code",null,"prettier-vscode",-1),se=e("strong",null,"保存时自动格式化",-1),ae=e("li",null,[e("code",null,"sd-fe-lint.config.js"),n("sd-fe-lint 包的一些配置，如启用的功能等")],-1),oe={href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"sd-fe-lint commit-file-scan",-1),le=e("code",null,"sd-fe-lint commit-msg-scan",-1),re=e("code",null,"sd-fe-lint commit-file-scan",-1),de=e("code",null,"--strict",-1),ce=a('<blockquote><p>注 1：如果项目已经配置过 ESLint、stylelint 等 Linter，执行 <code>sd-fe-lint init</code> 将会提示存在冲突的依赖和配置，并在得到确认后进行覆盖：</p><p>注 2：如果项目的 .vscode/ 目录被 .gitignore 忽略，可以在拉取项目后单独执行 <code>sd-fe-lint init --vscode</code> 命令写入 <code>.vscode/extensions.json</code> 和 <code>.vscode/settings.json</code> 配置文件</p></blockquote><h4 id="sd-fe-lint-scan-一键扫描" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-scan-一键扫描" aria-hidden="true">#</a> <code>sd-fe-lint scan</code>：一键扫描</h4><p>在项目的根目录执行命令，即可扫描项目的规范问题：</p><p>支持下列参数：</p><ul><li><code>-q</code> <code>--quiet</code> 仅报告 error 级别的问题</li><li><code>-o</code> <code>--output-report</code> 输出扫描出的规范问题日志</li><li><code>-i</code> <code>--include &lt;dirpath&gt;</code> 指定要进行规范扫描的目录</li><li><code>--no-ignore</code> 忽略 eslint 的 ignore 配置文件和 ignore 规则</li></ul><blockquote><p>注 1：事实上，你可以在任意目录执行 <code>sd-fe-lint scan</code> <code>sd-fe-lint</code> 会根据文件类型、JSON 等特征嗅探项目类型。但我们还是推荐在执行过 <code>sd-fe-lint init</code> 的项目根目录执行 <code>sd-fe-lint scan</code>，以得到最准确的扫描结果。</p><p>注 2: <code>sd-fe-lint</code> 会根据项目内有无 eslint 和 stylelint 配置文件判断使用项目的配置文件还是 <code>sd-fe-lint</code> 默认配置进行扫描。若使用项目的，在未安装依赖时会帮其安装（执行 npm i）。若使用项目配置扫描失败，则使用默认配置扫描</p></blockquote><h4 id="sd-fe-lint-fix-一键修复" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-fix-一键修复" aria-hidden="true">#</a> <code>sd-fe-lint fix</code>：一键修复</h4><p>在项目的根目录执行命令，即可修复部分规范问题：</p><p>支持下列参数：</p><ul><li><code>-i</code> <code>--include &lt;dirpath&gt;</code> 指定要进行修复扫描的目录</li><li><code>--no-ignore</code> 忽略 eslint 的 ignore 配置文件和 ignore 规则</li></ul><p>注意请 review 下修复前后的代码，以免工具误修的情况。</p><h4 id="sd-fe-lint-commit-file-scan-提交文件扫描" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-commit-file-scan-提交文件扫描" aria-hidden="true">#</a> <code>sd-fe-lint commit-file-scan</code> 提交文件扫描</h4><p>在 git commit 时对提交文件进行规范问题扫描，需配合 git 的 pre-commit 钩子使用。</p><p>支持下列参数：</p><ul><li><code>-s</code> <code>--strict</code> 严格模式，对 warn 和 error 问题都卡口，默认仅对 error 问题卡口</li></ul><h4 id="sd-fe-lint-commit-msg-scan-提交信息扫描" tabindex="-1"><a class="header-anchor" href="#sd-fe-lint-commit-msg-scan-提交信息扫描" aria-hidden="true">#</a> <code>sd-fe-lint commit-msg-scan</code> 提交信息扫描</h4>',16),pe={href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"},ue=a(`<h2 id="node-js-api-使用" tabindex="-1"><a class="header-anchor" href="#node-js-api-使用" aria-hidden="true">#</a> Node.js API 使用</h2><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> sd-fe-lint <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><h4 id="init-初始化" tabindex="-1"><a class="header-anchor" href="#init-初始化" aria-hidden="true">#</a> init：初始化</h4><ul><li>sd-fe-lint.init(config)：将项目一键接入规范，效果等同于 <code>sd-fe-lint init</code></li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">await</span> encode<span class="token punctuation">)</span> <span class="token operator">-</span>
  fe <span class="token operator">-</span>
  lint<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">eslintType</span><span class="token operator">:</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enableESLint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enableStylelint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enableMarkdownlint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enablePrettier</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">disableNpmInstall</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>config 参数如下：</p><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>cwd</td><td>string</td><td>-</td><td>项目绝对路径</td></tr><tr><td>eslintType</td><td>ESLintType</td><td>-</td><td>语言和框架类型，如果不配置，等同于 sd-fe-lint init，控制台会出现选择器，如果配置，控制台就不会出现选择器</td></tr><tr><td>enableESLint</td><td>boolean</td><td>true</td><td>是否启用 ESLint，如果不配置默认值为 true，即默认启用 ESLint</td></tr><tr><td>enableStylelint</td><td>boolean</td><td>-</td><td>是否启用 stylelint，如果不配置，等同于 sd-fe-lint init，控制台会出现选择器，如果配置，控制台就不会出现选择器</td></tr><tr><td>enableMarkdownlint</td><td>boolean</td><td>-</td><td>是否启用 markdownlint，如果不配置，等同于 sd-fe-lint init，控制台会出现选择器，如果配置，控制台就不会出现选择器</td></tr><tr><td>enablePrettier</td><td>boolean</td><td>-</td><td>是否启用 Prettier</td></tr><tr><td>disableNpmInstall</td><td>boolean</td><td>false</td><td>是否禁用自动在初始化完成后安装依赖</td></tr></tbody></table><h5 id="eslinttype" tabindex="-1"><a class="header-anchor" href="#eslinttype" aria-hidden="true">#</a> ESLintType</h5><ul><li><code>default</code>: JavaScript 项目（未使用 React 和 Vue 的 JS 项目）</li><li><code>react</code>: JavaScript + React 项目</li><li><code>vue</code>: JavaScript + Vue 项目</li><li><code>typescript/default</code>: TypeScript 项目（未使用 React 和 Vue 的 TS 项目）</li><li><code>typescript/react</code>: TypeScript + React 项目</li><li><code>typescript/vue</code>: TypeScript + Vue 项目</li><li><code>es5</code>: ES5 及之前版本的 JavaScript 老项目</li></ul><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p><code>sd-fe-lint</code> 基于一份配置进行扫描（但你也可以零配置使用），支持的配置参数有：</p><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>enableESLint</td><td>boolean</td><td>true</td><td>是否启用 ESLint</td></tr><tr><td>enableStylelint</td><td>boolean</td><td>true</td><td>是否启用 stylelint</td></tr><tr><td>enableMarkdownlint</td><td>boolean</td><td>true</td><td>是否启用 markdownlint</td></tr><tr><td>enablePrettier</td><td>boolean</td><td>-</td><td>是否启用 Prettier</td></tr><tr><td>eslintOptions</td><td>ESLint.Options</td><td>-</td><td>ESLint 配置项，若未设置将使用执行目录下或内置的默认 eslintrc 和 eslintignore 进行扫描</td></tr><tr><td>stylelintOptions</td><td>stylelint.LinterOptions</td><td>-</td><td>stylelint 配置项，若未设置将使用执行目录下或内置的默认 stylelintrc 和 stylelintignore 进行扫描</td></tr><tr><td>markdownlintOptions</td><td>markdownlint.Options</td><td>-</td><td>markdownlint 配置项，若未设置将使用执行目录下或内置的默认 markdownlint 配置文件进行扫描</td></tr></tbody></table><p><code>sd-fe-lint</code> 会读取执行目录下的 <code>sd-fe-lint.config.js</code> 作为配置文件。<code>sd-fe-lint init</code> 会在执行目录下新增如下的 <code>sd-fe-lint.config.js</code> 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enableESLint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enableStylelint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enableMarkdownlint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enablePrettier</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="typescript-项目扫描性能问题" tabindex="-1"><a class="header-anchor" href="#typescript-项目扫描性能问题" aria-hidden="true">#</a> TypeScript 项目扫描性能问题</h3><p>如果你的 TS 项目 commit 卡口和 <code>sd-fe-lint scan</code> 运行时间很长，可以通过如下在 <code>.eslintrc.js</code> 中增加以下配置提升性能：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// for lint performance</span>
    <span class="token literal-property property">createDefaultProgram</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// for lint performance</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@typescript-eslint/dot-notation&#39;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// for lint performance</span>
    <span class="token string-property property">&#39;@typescript-eslint/restrict-plus-operands&#39;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// for lint performance</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function he(me,fe){const t=i("ExternalLinkIcon");return l(),r("div",null,[c,e("p",null,[p,n(" 是"),e("a",u,[n("前端编码规范工程化"),s(t)]),n("的配套 Lint 工具，可以为项目一键接入规范、一键扫描和修复规范问题，保障项目的编码规范和代码质量。")]),h,m,e("table",null,[f,e("tbody",null,[e("tr",null,[k,e("td",null,[e("a",_,[n("ESLint"),s(t)])]),e("td",null,[e("a",b,[n("eslint-config-sd"),s(t)])])]),e("tr",null,[g,e("td",null,[e("a",v,[n("stylelint"),s(t)])]),e("td",null,[e("a",y,[n("sd-stylelint-config"),s(t)])])]),e("tr",null,[w,e("td",null,[e("a",x,[n("commitlint"),s(t)])]),e("td",null,[e("a",S,[n("sd-commitlint-config"),s(t)])])]),e("tr",null,[j,e("td",null,[e("a",L,[n("markdownlint"),s(t)])]),e("td",null,[e("a",E,[n("sd-markdownlint-config"),s(t)])])])])]),P,e("ul",null,[e("li",null,[n("安装各种依赖：包括 "),T,n(" 依赖，如 "),e("a",N,[n("ESLint"),s(t)]),n("、"),e("a",V,[n("stylelint"),s(t)]),n("、"),e("a",I,[n("commitlint"),s(t)]),n("、"),e("a",O,[n("markdownlint"),s(t)]),n(" 等；配置依赖，如 "),e("a",J,[n("eslint-config-sd"),s(t)]),n("、"),e("a",q,[n("sd-stylelint-config"),s(t)]),n("、"),e("a",C,[n("sd-commitlint-config"),s(t)]),n("、"),e("a",A,[n("sd-markdownlint-config"),s(t)]),n(" 等")]),e("li",null,[n("写入各种配置文件，包括： "),e("ul",null,[M,e("li",null,[R,n("：符合规范的 "),e("a",B,[n("Prettier 配置"),s(t)])]),e("li",null,[D,n("：符合规范的 "),e("a",F,[n("editorconfig"),s(t)])]),e("li",null,[G,n("：写入规范相关的 "),e("a",z,[n("VSCode 插件推荐"),s(t)]),n("，包括 "),H,n("、"),K,n("、"),Q,n("、"),U,n(" 等")]),e("li",null,[W,n("：写入规范相关的 "),e("a",X,[n("VSCode 设置"),s(t)]),n("，设置 "),Y,n(" 和 "),Z,n(" 插件的 "),$,n(" 及"),ee,n("，如果选择使用 "),ne,n("，会同时将 "),te,n(" 插件设置为各前端语言的 defaultFormatter，并配置"),se]),ae])]),e("li",null,[n("配置 git commit 卡口：使用 "),e("a",oe,[n("husky"),s(t)]),n(" 设置代码提交卡口，在 git commit 时会运行 "),ie,n(" 和 "),le,n(" 分别对提交文件和提交信息进行规范检查。"),re,n(" 默认仅对 error 问题卡口，如果你想对 warn 问题也卡口，可以增加 "),de,n(" 参数以开启严格模式")])]),ce,e("p",null,[n("git commit 时对 commit message 的格式进行扫描（使用 commitlint），需配合 "),e("a",pe,[n("husky"),s(t)]),n(" 的 commit-msg 钩子使用。")]),ue])}const _e=o(d,[["render",he],["__file","index.html.vue"]]);export{_e as default};
